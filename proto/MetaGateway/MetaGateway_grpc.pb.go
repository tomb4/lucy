// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package MetaGateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaGatewayServiceClient is the client API for MetaGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaGatewayServiceClient interface {
	//踢出某个连接
	KickOut(ctx context.Context, in *KickOutReq, opts ...grpc.CallOption) (*Nil, error)
	//拉取消息通知
	SyncMessageNotify(ctx context.Context, in *SyncMessageNotifyReq, opts ...grpc.CallOption) (*Nil, error)
	//场景切换通知
	SceneChange(ctx context.Context, in *SceneChangeReq, opts ...grpc.CallOption) (*Nil, error)
	//服务端同步状态变化事件
	BroadcastStateEvent(ctx context.Context, in *BroadcastStateEventReq, opts ...grpc.CallOption) (*BroadcastStateEventResp, error)
	//闯关游戏
	BroadcastPassThroughEvent(ctx context.Context, in *BroadcastPassThroughEventReq, opts ...grpc.CallOption) (*Nil, error)
}

type metaGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaGatewayServiceClient(cc grpc.ClientConnInterface) MetaGatewayServiceClient {
	return &metaGatewayServiceClient{cc}
}

func (c *metaGatewayServiceClient) KickOut(ctx context.Context, in *KickOutReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/MetaGateway.MetaGatewayService/KickOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaGatewayServiceClient) SyncMessageNotify(ctx context.Context, in *SyncMessageNotifyReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/MetaGateway.MetaGatewayService/SyncMessageNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaGatewayServiceClient) SceneChange(ctx context.Context, in *SceneChangeReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/MetaGateway.MetaGatewayService/SceneChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaGatewayServiceClient) BroadcastStateEvent(ctx context.Context, in *BroadcastStateEventReq, opts ...grpc.CallOption) (*BroadcastStateEventResp, error) {
	out := new(BroadcastStateEventResp)
	err := c.cc.Invoke(ctx, "/MetaGateway.MetaGatewayService/BroadcastStateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaGatewayServiceClient) BroadcastPassThroughEvent(ctx context.Context, in *BroadcastPassThroughEventReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/MetaGateway.MetaGatewayService/BroadcastPassThroughEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaGatewayServiceServer is the server API for MetaGatewayService service.
// All implementations must embed UnimplementedMetaGatewayServiceServer
// for forward compatibility
type MetaGatewayServiceServer interface {
	//踢出某个连接
	KickOut(context.Context, *KickOutReq) (*Nil, error)
	//拉取消息通知
	SyncMessageNotify(context.Context, *SyncMessageNotifyReq) (*Nil, error)
	//场景切换通知
	SceneChange(context.Context, *SceneChangeReq) (*Nil, error)
	//服务端同步状态变化事件
	BroadcastStateEvent(context.Context, *BroadcastStateEventReq) (*BroadcastStateEventResp, error)
	//闯关游戏
	BroadcastPassThroughEvent(context.Context, *BroadcastPassThroughEventReq) (*Nil, error)
	mustEmbedUnimplementedMetaGatewayServiceServer()
}

// UnimplementedMetaGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaGatewayServiceServer struct {
}

func (UnimplementedMetaGatewayServiceServer) KickOut(context.Context, *KickOutReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickOut not implemented")
}
func (UnimplementedMetaGatewayServiceServer) SyncMessageNotify(context.Context, *SyncMessageNotifyReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMessageNotify not implemented")
}
func (UnimplementedMetaGatewayServiceServer) SceneChange(context.Context, *SceneChangeReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SceneChange not implemented")
}
func (UnimplementedMetaGatewayServiceServer) BroadcastStateEvent(context.Context, *BroadcastStateEventReq) (*BroadcastStateEventResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastStateEvent not implemented")
}
func (UnimplementedMetaGatewayServiceServer) BroadcastPassThroughEvent(context.Context, *BroadcastPassThroughEventReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastPassThroughEvent not implemented")
}
func (UnimplementedMetaGatewayServiceServer) mustEmbedUnimplementedMetaGatewayServiceServer() {}

// UnsafeMetaGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaGatewayServiceServer will
// result in compilation errors.
type UnsafeMetaGatewayServiceServer interface {
	mustEmbedUnimplementedMetaGatewayServiceServer()
}

func RegisterMetaGatewayServiceServer(s grpc.ServiceRegistrar, srv MetaGatewayServiceServer) {
	s.RegisterService(&MetaGatewayService_ServiceDesc, srv)
}

func _MetaGatewayService_KickOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickOutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaGatewayServiceServer).KickOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaGateway.MetaGatewayService/KickOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaGatewayServiceServer).KickOut(ctx, req.(*KickOutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaGatewayService_SyncMessageNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMessageNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaGatewayServiceServer).SyncMessageNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaGateway.MetaGatewayService/SyncMessageNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaGatewayServiceServer).SyncMessageNotify(ctx, req.(*SyncMessageNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaGatewayService_SceneChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaGatewayServiceServer).SceneChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaGateway.MetaGatewayService/SceneChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaGatewayServiceServer).SceneChange(ctx, req.(*SceneChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaGatewayService_BroadcastStateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastStateEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaGatewayServiceServer).BroadcastStateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaGateway.MetaGatewayService/BroadcastStateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaGatewayServiceServer).BroadcastStateEvent(ctx, req.(*BroadcastStateEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaGatewayService_BroadcastPassThroughEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastPassThroughEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaGatewayServiceServer).BroadcastPassThroughEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaGateway.MetaGatewayService/BroadcastPassThroughEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaGatewayServiceServer).BroadcastPassThroughEvent(ctx, req.(*BroadcastPassThroughEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaGatewayService_ServiceDesc is the grpc.ServiceDesc for MetaGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MetaGateway.MetaGatewayService",
	HandlerType: (*MetaGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KickOut",
			Handler:    _MetaGatewayService_KickOut_Handler,
		},
		{
			MethodName: "SyncMessageNotify",
			Handler:    _MetaGatewayService_SyncMessageNotify_Handler,
		},
		{
			MethodName: "SceneChange",
			Handler:    _MetaGatewayService_SceneChange_Handler,
		},
		{
			MethodName: "BroadcastStateEvent",
			Handler:    _MetaGatewayService_BroadcastStateEvent_Handler,
		},
		{
			MethodName: "BroadcastPassThroughEvent",
			Handler:    _MetaGatewayService_BroadcastPassThroughEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MetaGateway.proto",
}
