package navmesh

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_RayCast(t *testing.T) {
	navMesh, err := InitNavMesh("./testdata/all_tiles_tilecache.bin")
	//navMesh, err := InitNavMesh("./testdata/u3d_test_1.bin")
	assert.NoError(t, err)

	tests := []struct {
		startPos [3]float32
		endPos   [3]float32
		result   bool
	}{
		// 22.190926 -2.369564 4.615116  22.965063 -2.369274 15.669338
		{
			[3]float32{22.190926, -2.369564, 4.615116},
			[3]float32{22.965063, -2.369274, 15.669338},
			true,
		},
		// 22.190926 -2.369564 4.615116  14.059574 -2.367699 -8.739838
		{
			[3]float32{22.190926, -2.369564, 4.615116},
			[3]float32{14.059574, -2.367699, -8.739838},
			true,
		},
		// 22.190926 -2.369564 4.615116  11.093769 -2.369942 -22.069349
		{
			[3]float32{22.190926, -2.369564, 4.615116},
			[3]float32{11.093769, -2.369942, -22.069349},
			true,
		},
		// 20.374811 -2.367756 19.014463  14.419834 -2.367683 -8.393379
		{
			[3]float32{20.374811, -2.367756, 19.014463},
			[3]float32{14.419834, -2.367683, -8.393379},
			true,
		},
	}

	for _, tt := range tests {
		res, point := navMesh.RayCast(CoordinateTrans(tt.startPos[:]), CoordinateTrans(tt.endPos[:]))
		assert.Equal(t, res, tt.result)
		t.Log(point)
	}
}

func TestNavMesh_FindStraightPath(t *testing.T) {
	navMesh, err := InitNavMesh("./testdata/all_tiles_tilecache.bin")
	assert.NoError(t, err)

	tests := []struct {
		startPos [3]float32
		endPos   [3]float32
	}{
		{
			[3]float32{-12.308140, -2.369081, 28.016869},
			[3]float32{-18.964970, -2.369175, 28.097702},
		},
		// 54.522820 -2.344612 4.843334  48.226448 -2.405426 16.069572
		{
			[3]float32{54.522820, -2.344612, 4.843334},
			[3]float32{48.226448, -2.405426, 16.069572},
		},
		// 21.221199 -2.368279 17.415764  0.366028 15.240368 12.633240
		{
			[3]float32{21.221199, -2.368279, 17.415764},
			[3]float32{0.366028, 15.240368, 12.633240},
		},
		// -12.753227 -2.366333 25.079393  -20.350662 7.930317 5.482494
		{
			[3]float32{-12.753227, -2.366333, 25.079393},
			[3]float32{-20.350662, 7.930317, 5.482494},
		},
		// 38.212116 -2.251945 -21.890827  5.507507 8.236019 -9.634197
		{
			[3]float32{38.212116, -2.251945, -21.890827},
			[3]float32{5.507507, 8.236019, -9.634197},
		},
		// 60.413380 0.930878 18.982487  47.053101 -2.431732 20.155018
		{
			[3]float32{60.413380, 0.930878, 18.982487},
			[3]float32{47.053101, -2.431732, 20.155018},
		},
		// 12.598770 -2.369865 -21.983509  24.246674 -2.369507 22.522186
		{
			[3]float32{12.598770, -2.369865, -21.983509},
			[3]float32{24.246674, -2.369507, 22.522186},
		},
		// 12.756317 -2.369797 -21.811928  24.639034 -2.369820 23.086712
		{
			[3]float32{12.756317, -2.369797, -21.811928},
			[3]float32{24.639034, -2.369820, 23.086712},
		},
	}

	for _, tt := range tests {
		ok, points := navMesh.FindStraightPath(CoordinateTrans(tt.startPos[:]), CoordinateTrans(tt.endPos[:]))
		t.Log(ok)
		t.Log(points)
	}
}
